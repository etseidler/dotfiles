exports.id=795,exports.ids=[795],exports.modules={2570:(e,t,i)=>{i.d(t,{GraphWebviewProvider:()=>GraphWebviewProvider});var r=i(1398),s=i(4692),o=i(7835),a=i(5811),n=i(2251),h=i(1646),l=i(4039),p=i(6347),d=i(2710),g=i(2289),c=i(9268),u=i(1776),m=i(8085),f=i(8696),v=i(9313),w=i(5716),y=i(3386),b=i(8400),C=i(315),R=i(9457),P=i(5416),W=i(5302),S=i(4931),D=i(1977),k=i(3494),_=i(6447),G=i(9964),I=i(7628),T=i(594),M=i(7240),O=i(9189),H=i(4964),B=i(7023),A=i(1885),V=i(8049),F=i(3404),q=i(369),x=i(351),E=i(4424),L=i(156),N=i(4143),$=i(7686),j=i(9184),z=i(9941),Y=i(4007),U=i(124),Z=i(5270),Q=i(8423),J=i(471),K=i(1165),X=i(473),ee=i(2540),et=i(7930),ei=i(701),er=i(3503);let es="graph",eo=["upstream","pullRequest","issue"],ea=new er.Q2(es,"chooseRepository"),en=new er.Q2(es,"dblclick");new er.Q2(es,"dblclick");let eh=new er.Q2(es,"avatars/get"),el=new er.Q2(es,"refs/metadata/get"),ep=new er.Q2(es,"rows/get"),ed=new er.Q2(es,"pullRequest/openDetails"),eg=new er.Q2(es,"search/openInView"),ec=new er.Q2(es,"columns/update"),eu=new er.Q2(es,"refs/update/visibility"),em=new er.Q2(es,"filters/update/excludeTypes"),ef=new er.Q2(es,"configuration/update"),ev=new er.Q2(es,"search/update/mode"),ew=new er.Q2(es,"filters/update/includedRefs"),ey=new er.Q2(es,"selection/update"),eb=new er.Oz(es,"chooseRef"),eC=new er.Oz(es,"rows/ensure"),eR=new er.Oz(es,"counts"),eP=new er.Oz(es,"row/hover/get"),eW=new er.Oz(es,"search"),eS=new er.C1(es,"repositories/integration/didChange"),eD=new er.C1(es,"didChange",!0,!0),ek=new er.C1(es,"configuration/didChange"),e_=new er.C1(es,"subscription/didChange"),eG=new er.C1(es,"avatars/didChange"),eI=new er.C1(es,"branchState/didChange"),eT=new er.C1(es,"refs/didChangeMetadata"),eM=new er.C1(es,"columns/didChange"),eO=new er.C1(es,"scrollMarkers/didChange"),eH=new er.C1(es,"refs/didChangeVisibility"),eB=new er.C1(es,"rows/didChange",void 0,!0),eA=new er.C1(es,"rows/stats/didChange"),eV=new er.C1(es,"selection/didChange"),eF=new er.C1(es,"workingTree/didChange"),eq=new er.C1(es,"didSearch"),ex=new er.C1(es,"didFetch"),eE=new er.C1(es,"featurePreview/didStart");var eL=Object.defineProperty,eN=Object.getOwnPropertyDescriptor,e$=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),ej=e=>{throw TypeError(e)},ez=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eN(t,i):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eL(t,i,o),o},eY=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&ej("Object expected"),i&&(r=t[e$("asyncDispose")]),void 0===r&&(r=t[e$("dispose")],i&&(s=r)),"function"!=typeof r&&ej("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},eU=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var a=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(a).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let eZ={ref:{width:130,isHidden:!1,order:0},graph:{width:150,mode:void 0,isHidden:!1,order:1},message:{width:300,isHidden:!1,order:2},author:{width:130,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!1,order:5},sha:{width:130,isHidden:!1,order:6}},eQ={ref:{width:32,isHidden:!1},graph:{width:150,mode:"compact",isHidden:!1},author:{width:32,isHidden:!1,order:2},message:{width:500,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!0,order:5},sha:{width:130,isHidden:!1,order:6}};let GraphWebviewProvider=class GraphWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._showDetailsView=N.H.get("graph.showDetailsView"),this._theme=r.window.activeColorTheme,this.ensureRepositorySubscriptions(),this._disposable=r.Disposable.from(N.H.onDidChange(this.onConfigurationChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.subscription.onDidChangeFeaturePreview(this.onFeaturePreviewChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}},this.container.integrations.onDidChangeConnectionState(this.onIntegrationConnectionChanged,this))}_repository;get repository(){return this._repository}set repository(e){if(this._repository===e){this.ensureRepositorySubscriptions();return}this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.host.ready&&this.updateState()}_selection;get activeSelection(){return this._selection?.[0]}_cancellations=new Map;_discovering;_disposable;_etag;_etagSubscription;_etagRepository;_firstSelection=!0;_getBranchesAndTagsTips;_graph;_hoverCache=new Map;_ipcNotificationMap=new Map([[eM,this.notifyDidChangeColumns],[ek,this.notifyDidChangeConfiguration],[eD,this.notifyDidChangeState],[eH,this.notifyDidChangeRefsVisibility],[eO,this.notifyDidChangeScrollMarkers],[eV,this.notifyDidChangeSelection],[e_,this.notifyDidChangeSubscription],[eF,this.notifyDidChangeWorkingTree],[ex,this.notifyDidFetch],[eE,this.notifyDidStartFeaturePreview]]);_refsMetadata;_search;_selectedId;_selectedRows;_showDetailsView;_theme;_repositoryEventsDisposable;_lastFetchedDisposable;isWindowFocused=!0;dispose(){this._disposable.dispose()}canReuseInstance(...e){let t;if(1===this.container.git.openRepositoryCount)return!0;let[i]=e;return(0,W.Z6)(i)?t=i:e1(i)?t=this.container.git.getRepository(i.ref.repoPath):(0,ei.c)(i)&&null!=i.state.selectedRepository&&(t=this.container.git.getRepository(i.state.selectedRepository)),t?.uri.toString()===this.repository?.uri.toString()||void 0}getSplitArgs(){return null!=this.repository?[this.repository]:[]}getTelemetryContext(){return{...this.host.getTelemetryContext(),"context.repository.id":this.repository?.idHash,"context.repository.scheme":this.repository?.uri.scheme,"context.repository.closed":this.repository?.closed,"context.repository.folder.scheme":this.repository?.folder?.uri.scheme,"context.repository.provider.id":this.repository?.provider.id}}getShownTelemetryContext(){let e={},t=this.getColumns();if(null!=t)for(let[i,r]of Object.entries(t))r.isHidden||(e[`context.column.${i}.visible`]=!0),null!=r.mode&&(e[`context.column.${i}.mode`]=r.mode);let i=(0,Q.Bq)(N.H.get("graph"),"context.config",{joinArrays:!0});return{...this.getTelemetryContext(),...e,...i}}async onShowing(e,t,...i){this._firstSelection=!0,this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let[r]=i;if((0,W.Z6)(r))this.repository=r;else if(e1(r)){this.repository=this.container.git.getRepository(r.ref.repoPath);let e=r.ref.ref;if((0,V.HH)(e)||(e=await this.container.git.resolveReference(r.ref.repoPath,e,void 0,{force:!0})),this.setSelectedRows(e),null!=this._graph){if(this._graph?.ids.has(e))return this.notifyDidChangeSelection(),[!0,this.getShownTelemetryContext()];this.onGetMoreRows({id:e},!0)}}else if((0,ei.c)(r)&&null!=r.state.selectedRepository&&(this.repository=this.container.git.getRepository(r.state.selectedRepository)),null==this.repository&&this.container.git.repositoryCount>1){let[t]=(0,o.qU)(n.d.ShowGraph,void 0,...i),r=Array.isArray(t)?t[0]:t;"scm"===r.type&&null!=r.scm.rootUri?this.repository=this.container.git.getRepository(r.scm.rootUri):"viewItem"===r.type&&r.node instanceof et.P&&(this.repository=r.node.repo),null!=this.repository&&!e&&this.host.ready&&this.updateState()}return[!0,this.getShownTelemetryContext()]}onRefresh(e){e&&this.resetRepositoryState()}includeBootstrap(){return this.getState(!0)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,L.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,L.Lb)(`${this.host.id}.openInTab`,()=>void(0,L.RS)(n.d.ShowGraphPage,void 0,this.repository))),e.push(this.host.registerWebviewCommand("gitlens.graph.push",this.push),this.host.registerWebviewCommand("gitlens.graph.pull",this.pull),this.host.registerWebviewCommand("gitlens.graph.fetch",this.fetch),this.host.registerWebviewCommand("gitlens.graph.pushWithForce",this.forcePush),this.host.registerWebviewCommand("gitlens.graph.publishBranch",this.publishBranch),this.host.registerWebviewCommand("gitlens.graph.switchToAnotherBranch",this.switchToAnother),this.host.registerWebviewCommand("gitlens.graph.createBranch",this.createBranch),this.host.registerWebviewCommand("gitlens.graph.deleteBranch",this.deleteBranch),this.host.registerWebviewCommand("gitlens.graph.copyRemoteBranchUrl",e=>this.openBranchOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote),this.host.registerWebviewCommand("gitlens.graph.mergeBranchInto",this.mergeBranchInto),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoBranch",this.rebase),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote),this.host.registerWebviewCommand("gitlens.graph.renameBranch",this.renameBranch),this.host.registerWebviewCommand("gitlens.graph.associateIssueWithBranch",this.associateIssueWithBranch),this.host.registerWebviewCommand("gitlens.graph.switchToBranch",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.hideLocalBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemoteBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemote",e=>this.hideRef(e,{remote:!0})),this.host.registerWebviewCommand("gitlens.graph.hideRefGroup",e=>this.hideRef(e,{group:!0})),this.host.registerWebviewCommand("gitlens.graph.hideTag",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.cherryPick",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl.multi",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote.multi",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.commitViaSCM",this.commitViaSCM),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoCommit",this.rebase),this.host.registerWebviewCommand("gitlens.graph.resetCommit",this.resetCommit),this.host.registerWebviewCommand("gitlens.graph.resetToCommit",this.resetToCommit),this.host.registerWebviewCommand("gitlens.graph.resetToTip",this.resetToTip),this.host.registerWebviewCommand("gitlens.graph.revert",this.revertCommit),this.host.registerWebviewCommand("gitlens.graph.showInDetailsView",this.openInDetailsView),this.host.registerWebviewCommand("gitlens.graph.switchToCommit",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.undoCommit",this.undoCommit),this.host.registerWebviewCommand("gitlens.graph.stash.save",this.saveStash),this.host.registerWebviewCommand("gitlens.graph.stash.apply",this.applyStash),this.host.registerWebviewCommand("gitlens.graph.stash.delete",this.deleteStash),this.host.registerWebviewCommand("gitlens.graph.stash.rename",this.renameStash),this.host.registerWebviewCommand("gitlens.graph.createTag",this.createTag),this.host.registerWebviewCommand("gitlens.graph.deleteTag",this.deleteTag),this.host.registerWebviewCommand("gitlens.graph.switchToTag",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.resetToTag",this.resetToTag),this.host.registerWebviewCommand("gitlens.graph.createWorktree",this.createWorktree),this.host.registerWebviewCommand("gitlens.graph.createPullRequest",this.createPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequest",this.openPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequestChanges",this.openPullRequestChanges),this.host.registerWebviewCommand("gitlens.graph.openPullRequestComparison",this.openPullRequestComparison),this.host.registerWebviewCommand("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithMergeBase",this.openChangedFileDiffsWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareWithUpstream",this.compareWithUpstream),this.host.registerWebviewCommand("gitlens.graph.compareWithHead",this.compareHeadWith),this.host.registerWebviewCommand("gitlens.graph.compareBranchWithHead",this.compareBranchWithHead),this.host.registerWebviewCommand("gitlens.graph.compareWithWorking",this.compareWorkingWith),this.host.registerWebviewCommand("gitlens.graph.compareWithMergeBase",this.compareWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking),this.host.registerWebviewCommand("gitlens.graph.copy",this.copy),this.host.registerWebviewCommand("gitlens.graph.copyMessage",this.copyMessage),this.host.registerWebviewCommand("gitlens.graph.copySha",this.copySha),this.host.registerWebviewCommand("gitlens.graph.addAuthor",this.addAuthor),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOn",()=>this.toggleColumn("author",!0)),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOff",()=>this.toggleColumn("author",!1)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOn",()=>this.toggleColumn("datetime",!0)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOff",()=>this.toggleColumn("datetime",!1)),this.host.registerWebviewCommand("gitlens.graph.columnShaOn",()=>this.toggleColumn("sha",!0)),this.host.registerWebviewCommand("gitlens.graph.columnShaOff",()=>this.toggleColumn("sha",!1)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOn",()=>this.toggleColumn("changes",!0)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOff",()=>this.toggleColumn("changes",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOn",()=>this.toggleColumn("graph",!0)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOff",()=>this.toggleColumn("graph",!1)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOn",()=>this.toggleColumn("message",!0)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOff",()=>this.toggleColumn("message",!1)),this.host.registerWebviewCommand("gitlens.graph.columnRefOn",()=>this.toggleColumn("ref",!0)),this.host.registerWebviewCommand("gitlens.graph.columnRefOff",()=>this.toggleColumn("ref",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphCompact",()=>this.setColumnMode("graph","compact")),this.host.registerWebviewCommand("gitlens.graph.columnGraphDefault",()=>this.setColumnMode("graph",void 0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOn",()=>this.toggleScrollMarker("localBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOff",()=>this.toggleScrollMarker("localBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOn",()=>this.toggleScrollMarker("remoteBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOff",()=>this.toggleScrollMarker("remoteBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOn",()=>this.toggleScrollMarker("stashes",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOff",()=>this.toggleScrollMarker("stashes",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOn",()=>this.toggleScrollMarker("tags",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOff",()=>this.toggleScrollMarker("tags",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOn",()=>this.toggleScrollMarker("pullRequests",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOff",()=>this.toggleScrollMarker("pullRequests",!1)),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag),this.host.registerWebviewCommand("gitlens.graph.shareAsCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.createPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.createCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.openChangedFiles",this.openFiles),this.host.registerWebviewCommand("gitlens.graph.openOnlyChangedFiles",this.openOnlyChangedFiles),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffs",e=>this.openAllChanges(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorking",e=>this.openAllChangesWithWorking(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsIndividually",e=>this.openAllChanges(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorkingIndividually",e=>this.openAllChangesWithWorking(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileRevisions",this.openRevisions),this.host.registerWebviewCommand("gitlens.graph.resetColumnsDefault",()=>this.updateColumns(eZ)),this.host.registerWebviewCommand("gitlens.graph.resetColumnsCompact",()=>this.updateColumns(eQ)),this.host.registerWebviewCommand("gitlens.graph.openInWorktree",this.openInWorktree),this.host.registerWebviewCommand("gitlens.graph.openWorktree",this.openWorktree),this.host.registerWebviewCommand("gitlens.graph.openWorktreeInNewWindow",e=>this.openWorktree(e,{location:"newWindow"})),this.host.registerWebviewCommand("gitlens.graph.copyWorkingChangesToWorktree",this.copyWorkingChangesToWorktree),this.host.registerWebviewCommand("gitlens.graph.generateCommitMessage",this.generateCommitMessage),this.host.registerWebviewCommand("gitlens.graph.compareSelectedCommits.multi",this.compareSelectedCommits),this.host.registerWebviewCommand("gitlens.graph.abortPausedOperation",this.abortPausedOperation),this.host.registerWebviewCommand("gitlens.graph.continuePausedOperation",this.continuePausedOperation),this.host.registerWebviewCommand("gitlens.graph.openRebaseEditor",this.openRebaseEditor),this.host.registerWebviewCommand("gitlens.graph.skipPausedOperation",this.skipPausedOperation)),e}onWindowFocusChanged(e){this.isWindowFocused=e}onFocusChanged(e){this._showActiveSelectionDetailsDebounced?.cancel(),e&&null!=this.activeSelection&&this.container.views.commitDetails.visible&&this.showActiveSelectionDetails()}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&(null!=this.repository&&this.repository.etag!==this._etagRepository||this.container.subscription.etag!==this._etagSubscription)){this.updateState(!0);return}if(e){this.host.sendPendingIpcNotifications();let{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onMessageReceived(e){switch(!0){case ea.is(e):this.onChooseRepository();break;case eb.is(e):this.onChooseRef(eb,e);break;case en.is(e):this.onDoubleClick(e.params);break;case eC.is(e):this.onEnsureRowRequest(eC,e);break;case eR.is(e):this.onGetCounts(eR,e);break;case eh.is(e):this.onGetMissingAvatars(e.params);break;case el.is(e):this.onGetMissingRefMetadata(e.params);break;case ep.is(e):this.onGetMoreRows(e.params);break;case eP.is(e):this.onHoverRowRequest(eP,e);break;case ed.is(e):this.onOpenPullRequestDetails(e.params);break;case eW.is(e):this.onSearchRequest(eW,e);break;case eg.is(e):this.onSearchOpenInView(e.params);break;case ec.is(e):this.onColumnsChanged(e.params);break;case ef.is(e):this.updateGraphConfig(e.params);break;case ev.is(e):this.updateGraphSearchMode(e.params);break;case em.is(e):this.updateExcludedTypes(this._graph?.repoPath,e.params);break;case ew.is(e):this.updateIncludeOnlyRefs(this._graph?.repoPath,e.params);break;case eu.is(e):this.onRefsVisibilityChanged(e.params);break;case ey.is(e):this.onSelectionChanged(e.params)}}async onGetCounts(e,t){let i;if(null!=this._graph){let e=await this.container.git.tags(this._graph.repoPath).getTags();i={branches:(0,Z.U9)(this._graph.branches?.values(),e=>!e.remote),remotes:this._graph.remotes.size,stashes:this._graph.stashes?.size,worktrees:null!=this._graph.worktrees?this._graph.worktrees.length-1:void 0,tags:e.values.length}}else i=void 0;this.host.respond(e,t,i)}updateGraphConfig(e){let t;let i=this.getComponentConfig();for(t in e.changes)if(i[t]!==e.changes[t])switch(t){case"minimap":N.H.updateEffective("graph.minimap.enabled",e.changes[t]);break;case"minimapDataType":N.H.updateEffective("graph.minimap.dataType",e.changes[t]);break;case"minimapMarkerTypes":{let i=[];for(let r of e.changes[t]??[])switch(r){case"localBranches":case"remoteBranches":case"stashes":case"tags":case"pullRequests":i.push(r)}N.H.updateEffective("graph.minimap.additionalTypes",i);break}case"dimMergeCommits":N.H.updateEffective("graph.dimMergeCommits",e.changes[t]);break;case"onlyFollowFirstParent":N.H.updateEffective("graph.onlyFollowFirstParent",e.changes[t])}}updateGraphSearchMode(e){this.container.storage.store("graph:searchMode",e.searchMode).catch()}_showActiveSelectionDetailsDebounced=void 0;showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,U.sg)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){let{activeSelection:e}=this;null!=e&&this.host.active&&this.container.events.fire("commit:selected",{commit:e,interaction:"passive",preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.host.id})}onConfigurationChanged(e){if(N.H.changed(e,"graph.showDetailsView")&&(this._showDetailsView=N.H.get("graph.showDetailsView")),N.H.changed(e,"graph.commitOrdering")){this.updateState();return}(N.H.changed(e,"defaultDateFormat")||N.H.changed(e,"defaultDateStyle")||N.H.changed(e,"advanced.abbreviatedShaLength")||N.H.changed(e,"graph"))&&(this.notifyDidChangeConfiguration(),(N.H.changed(e,"graph.onlyFollowFirstParent")||(N.H.changed(e,"graph.minimap.enabled")||N.H.changed(e,"graph.minimap.dataType"))&&N.H.get("graph.minimap.enabled")&&"lines"===N.H.get("graph.minimap.dataType")&&!this._graph?.includes?.stats)&&this.updateState())}onFeaturePreviewChanged(e){"graph"===e.feature&&this.notifyDidStartFeaturePreview(e)}getFeaturePreview(){return this.container.subscription.getFeaturePreview("graph")}onRepositoryChanged(e){if(!e.changed(W.Z_.Config,W.Z_.Head,W.Z_.Heads,W.Z_.Remotes,W.Z_.Stash,W.Z_.PausedOperationStatus,W.Z_.Tags,W.Z_.Unknown,W.Ti.Any)){this._etagRepository=e.repository.etag;return}if(e.changed(W.Z_.Config,W.Ti.Any)&&null!=this._refsMetadata)for(let[,e]of this._refsMetadata)null!=e&&(e.issue=void 0);e.changed(W.Z_.Head,W.Ti.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(W.Z_.Unknown,W.Ti.Exclusive))}onRepositoryFileSystemChanged(e){e.repository?.path===this.repository?.path&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription())}onThemeChanged(e){null!=this._theme&&((0,j.g4)(e)&&(0,j.g4)(this._theme)||(0,j.kH)(e)&&(0,j.kH)(this._theme))||(this._theme=e,this.updateState())}onColumnsChanged(e){this.updateColumns(e.config);let t={...this.getTelemetryContext()};for(let[i,r]of Object.entries(e.config))for(let[e,s]of Object.entries(r))t[`column.${i}.${e}`]=s;this.container.telemetry.sendEvent("graph/columns/changed",t)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph?.repoPath,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(e0(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&eX(t,"upstreamStatus")){let{ahead:e,behind:i,ref:r}=t.webviewItemValue;if(i>0)return void m.a$(r.repoPath,r);if(e>0)return void m.VC(r.repoPath,!1,r)}else if("pullRequest"===e.metadata.type&&eX(t,"pullrequest"))return void this.openPullRequestOnRemote(t);else if("issue"===e.metadata.type&&eX(t,"issue"))return void this.openIssueOnRemote(t);return}let{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?m.S_(i.repoPath):m.S_(i.repoPath,i,!!N.H.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){this._showActiveSelectionDetailsDebounced?.cancel();let t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);if(null!=t){this.container.events.fire("commit:selected",{commit:t,interaction:"active",preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.host.id});let i=this.host.isHost("editor")?this.container.views.commitDetails:this.container.views.graphDetails;i.ready||i.show({preserveFocus:e.preserveFocus},{commit:t,interaction:"active",preserveVisibility:!1})}}return Promise.resolve()}async onHoverRowRequest(e,t){let i={id:t.params.id,markdown:void 0};if(this.cancelOperation("hover"),null!=this._graph){let e=t.params.id,r=this._hoverCache.get(e);if(null==r){let i;let s=this.createCancellation("hover"),o=!0;switch(t.params.type){case"work-dir-changes":o=!1,i=await this.container.git.getCommit(this._graph.repoPath,S.SU);break;case"stash-node":{let e=await this.container.git.stash(this._graph.repoPath)?.getStash();i=e?.stashes.get(t.params.id);break}default:i=await this.container.git.getCommit(this._graph.repoPath,t.params.id)}if(null!=i&&!s.token.isCancellationRequested){let t=this._graph.rowsStats?.get(i.sha);null!=t&&(i=i.with({stats:{...i.stats,additions:t.additions,deletions:t.deletions,files:i.stats?.files?i.stats.files:t.files}})),r=this.getCommitTooltip(i,s.token).catch(t=>{throw this._hoverCache.delete(e),t}),o&&this._hoverCache.set(e,r)}}if(null!=r)try{i.markdown={status:"fulfilled",value:await r}}catch(e){i.markdown={status:"rejected",reason:e}}}i.markdown??={status:"rejected",reason:new l.AL},this.host.respond(e,t,i)}async getCommitTooltip(e,t){let i,r,s;let[o,a]=await Promise.allSettled([this.container.git.remotes(e.repoPath).getBestRemotesWithProviders(),e.ensureFullDetails({include:{stats:!0}})]);if(t.isCancellationRequested)throw new l.AL;let n=(0,J.Ro)(o,[]),[h]=n;if(h?.hasIntegration()){let[s,o]=await Promise.allSettled([(0,J.zu)(e.getEnrichedAutolinks(h),t),e.getAssociatedPullRequest(h)]);if(t.isCancellationRequested)throw new l.AL;let a=(0,J.Ro)(s);a?.paused||(i=a?.value),r=(0,J.Ro)(o)}return s=(0,C.kk)(e)?N.H.get("views.formats.stashes.tooltip"):N.H.get("views.formats.commits.tooltip"),this._getBranchesAndTagsTips??=await this.container.git.getBranchesAndTagsTipsLookup(e.repoPath),await b.c.fromTemplateAsync(s,e,{enrichedAutolinks:i,dateFormat:N.H.get("defaultDateFormat"),getBranchAndTagTips:this._getBranchesAndTagsTips,messageAutolinks:!0,messageIndent:4,pullRequest:r,outputFormat:"markdown",remotes:n})}async onEnsureRowRequest(e,t){let i,r;if(null==this._graph)return;let s=t.params,o=this._graph.remappedIds?.get(s.id)??s.id;this._graph.ids.has(o)?(i=s.id,r=s.id!==o?o:void 0):(await this.updateGraphWithMoreRows(this._graph,o,this._search),this.notifyDidChangeRows(),this._graph.ids.has(o)&&(i=s.id,r=s.id!==o?o:void 0)),this.host.respond(e,t,{id:i,remapped:r})}async onGetMissingAvatars(e){if(null==this._graph)return;let t=this._graph.repoPath;async function i(e,i){let r=await (0,s.m_)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,r.toString(!0))}let r=[];for(let[t,s]of Object.entries(e.emails))this._graph.avatars.has(t)||r.push(i.call(this,t,s));r.length&&(await Promise.allSettled(r),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!$.SD("gitlens:repos:withHostingIntegrationsConnected")?.includes(this._graph.repoPath))return;let t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);let r=(await this.container.git.branches(t).getBranches({filter:t=>t.id===e}))?.values?.[0],s={...this._refsMetadata.get(e)};if(null==r){for(let t of i)s[t]=null,this._refsMetadata.set(e,s);return}for(let o of i){if(!eo.includes(o)){s[o]=null,this._refsMetadata.set(e,s);continue}if("pullRequest"===o){let i=await r?.getAssociatedPullRequest();if(null==i){(void 0===s.pullRequest||s.pullRequest?.length===0)&&(s.pullRequest=null),this._refsMetadata.set(e,s);continue}let o={hostingServiceType:i.provider.id,id:Number.parseInt(i.id)||0,title:i.title,author:i.author.name,date:(i.mergedDate??i.closedDate??i.updatedDate)?.getTime(),state:i.state,url:i.url,context:(0,X.C9)({webviewItem:`gitlens:pullrequest${i.refs?"+refs":""}`,webviewItemValue:{type:"pullrequest",id:i.id,url:i.url,repoPath:t,refs:i.refs,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain,icon:i.provider.icon}}})};s.pullRequest=[o],this._refsMetadata.set(e,s),r?.upstream?.missing&&this._refsMetadata.set((0,M.Yk)(t,!0,r.upstream.name),s);continue}if("upstream"===o){let t=r?.upstream;if(null==t||t.missing){s.upstream=null,this._refsMetadata.set(e,s);continue}let i={name:(0,M.km)(t.name),owner:(0,M.Zq)(t.name),ahead:r.state.ahead,behind:r.state.behind,context:(0,X.C9)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,I.iw)(r),ahead:r.state.ahead,behind:r.state.behind}})};s.upstream=i,this._refsMetadata.set(e,s);continue}if("issue"===o){let t=await (0,k.GI)(this.container,r).then(e=>e.value);if((null==t||0===t.length)&&(null==(t=await r.getEnrichedAutolinks().then(async e=>{if(null!=e)return(await Promise.all([...e.values()].map(async([e])=>null!=e?await e:void 0))).filter(e=>null!=e&&e instanceof Object&&"type"in e&&"issue"===e.type)}))||0===t.length)){s.issue=null,this._refsMetadata.set(e,s);continue}let i=[];for(let e of t){let t=function(e){switch(e){case h.Q7.GitHub:return"github";case h.Q7.GitLab:return"gitlab";case h.tp.Jira:return"jiraCloud";default:return}}(e.provider.id);null!=t&&i.push({displayId:e.id,id:e.nodeId??e.id,title:`${e.title}
Double-click to open issue on ${e.provider.name}`,issueTrackerType:t,url:e.url,context:(0,X.C9)({webviewItem:"gitlens:issue",webviewItemValue:{type:"issue",id:e.id,url:e.url,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}}})})}s.issue=i,this._refsMetadata.set(e,s)}}}let r=[];for(let t of Object.keys(e.metadata))r.push(i.call(this,t,e.metadata[t]));r.length&&await Promise.allSettled(r),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){var i=[];try{if(this._graph?.paging==null)return;if(this._graph?.more==null||this.repository?.etag!==this._etagRepository){this.updateState(!0);return}let r=eY(i,new K.e(`GraohWebviewProvider.onGetMoreRows(${this.host.id})`));await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.container.telemetry.sendEvent("graph/rows/loaded",{...this.getTelemetryContext(),duration:r.elapsed(),rows:this._graph.rows.length??0}),this.notifyDidChangeRows(t)}catch(e){var r=e,s=!0}finally{eU(i,r,s)}}async onOpenPullRequestDetails(e){let t=this.repository;if(null==t)return;let i=await t.git.branches().getBranch();if(null==i)return;let r=await i.getAssociatedPullRequest();if(null!=r)return this.container.views.pullRequest.showPullRequest(r,i)}async onSearchRequest(e,t){try{var i=[];try{let r=eY(i,new K.e(`GraphWebviewProvider.onSearchRequest(${this.host.id})`)),s=await this.getSearchResults(t.params),o=t.params.search?(0,D.OM)(t.params.search):void 0,a=new Set;if(null!=o)for(let[e,t]of o)t.forEach(e=>a.add(e));this.container.telemetry.sendEvent("graph/searched",{...this.getTelemetryContext(),types:[...a].join(","),duration:r.elapsed(),matches:s.results?.count??0}),this.host.respond(e,t,s)}catch(e){var r=e,s=!0}finally{eU(i,r,s)}}catch(i){this.host.respond(e,t,{results:i instanceof l.AL?void 0:{error:i instanceof y.Do?"Invalid search pattern":"Unexpected error"}})}}async getSearchResults(e){if(null==e.search)return this.resetSearchState(),{results:void 0};let t=this._search;if(e.more&&t?.more!=null&&t.comparisonKey===(0,D.b4)(e.search))return null!=(t=await t.more(e.limit??N.H.get("graph.searchItemLimit")??100))?(this._search=t,await this.ensureSearchStartsInRange(this._graph,t),{results:t.results.size>0?{ids:Object.fromEntries((0,Z.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}}:void 0}):{results:void 0};if(null==t||t.comparisonKey!==(0,D.b4)(e.search)){if(null==this.repository)return{results:{error:"No repository"}};this.repository.etag!==this._etagRepository&&this.updateState(!0);let i=this.createCancellation("search");try{t=await this.repository.git.searchCommits(e.search,{limit:N.H.get("graph.searchItemLimit")??100,ordering:N.H.get("graph.commitOrdering"),cancellation:i.token})}catch(e){throw this._search=void 0,e}if(i.token.isCancellationRequested)throw new l.AL;this._search=t}else t=this._search;let i=await this.ensureSearchStartsInRange(this._graph,t),r=!1;return null!=i&&(r=!0,this.setSelectedRows(i)),{results:0===t.results.size?{count:0}:{ids:Object.fromEntries((0,Z.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}},selectedRows:r?this._selectedRows:void 0}}onSearchOpenInView(e){null!=this.repository&&this.container.views.searchAndCompare.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){let e=this.container.git.openRepositories.sort((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index),t=await (0,E.oe)(`Switch Repository ${a.EO.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t,this.container.telemetry.sendEvent("graph/repository/changed",{...this.getTelemetryContext(),"repository.id":this.repository?.idHash,"repository.scheme":this.repository?.uri.scheme,"repository.closed":this.repository?.closed,"repository.folder.scheme":this.repository?.folder?.uri.scheme,"repository.provider.id":this.repository?.provider.id}))}async onChooseRef(e,t){let i;if(null==this.repository)return this.host.respond(e,t,void 0);if(t.params.alt)i=await (0,x.N)(this.repository.path,`Jump to Reference ${a.EO.Dot} ${this.repository?.name}`,"Choose a reference to jump to",{include:x.m.BranchesAndTags});else{let e=(0,Z.I6)(this._graph.branches.values(),e=>e.current);null==e&&(e=await this.repository.git.branches().getBranch()),null!=e&&(i=e)}return this.host.respond(e,t,i?.sha!=null?{name:i.name,sha:i.sha}:void 0)}_fireSelectionChangedDebounced=void 0;onSelectionChanged(e){this._showActiveSelectionDetailsDebounced?.cancel();let t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,U.sg)(this.fireSelectionChanged.bind(this),50)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;let i=this.getRevisionReference(this.repository.path,e,t),r=null!=i?[i]:void 0;this._selection=r,null!=r&&(!(!this._firstSelection&&this.host.isHost("editor"))||this.host.active)&&(this.container.events.fire("commit:selected",{commit:r[0],interaction:"passive",preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.host.id}),this._firstSelection=!1)}_notifyDidChangeStateDebounced=void 0;getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case"stash-node":return(0,A.kA)(t,e,{refType:"stash",name:t,number:void 0});case"work-dir-changes":return(0,A.kA)(S.SU,e,{refType:"revision"});default:return(0,A.kA)(t,e,{refType:"revision"})}}updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,U.sg)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced()}_notifyDidChangeAvatarsDebounced=void 0;updateAvatars(e=!1){if(e){this.notifyDidChangeAvatars();return}null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,U.sg)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced()}async notifyDidChangeAvatars(){if(null==this._graph)return;let e=this._graph;return this.host.notify(eG,{avatars:Object.fromEntries(e.avatars)})}async notifyDidChangeBranchState(e){return this.host.notify(eI,{branchState:e})}_notifyDidChangeRefsMetadataDebounced=void 0;updateRefsMetadata(e=!1){if(e){this.notifyDidChangeRefsMetadata();return}null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,U.sg)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced()}async notifyDidChangeRefsMetadata(){return this.host.notify(eT,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eM,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(eM,{columns:t,context:this.getColumnHeaderContext(t),settingsContext:this.getGraphSettingsIconContext(t)})}async notifyDidChangeScrollMarkers(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eO,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(eO,{context:this.getGraphSettingsIconContext(t)})}async notifyDidChangeRefsVisibility(e){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eH,this._ipcNotificationMap,this),!1;if(null==e){let t=this.getFiltersByRepo(this._graph?.repoPath);if(e={branchesVisibility:this.getBranchesVisibility(t),excludeRefs:this.getExcludedRefs(t,this._graph)??{},excludeTypes:this.getExcludedTypes(t)??{},includeOnlyRefs:void 0},e?.includeOnlyRefs==null){let i=await this.getIncludedRefs(t,this._graph,{timeout:100});e.includeOnlyRefs=i.refs,i.continuation?.then(t=>{null!=t&&this.notifyDidChangeRefsVisibility({...e,includeOnlyRefs:t})})}}return this.host.notify(eH,e)}async notifyDidChangeConfiguration(){return this.host.ready&&this.host.visible?this.host.notify(ek,{config:this.getComponentConfig()}):(this.host.addPendingIpcNotification(ek,this._ipcNotificationMap,this),!1)}async notifyDidFetch(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ex,this._ipcNotificationMap,this),!1;let e=await this.repository.getLastFetched();return this.host.notify(ex,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;let i=this._graph;return this.host.notify(eB,{rows:i.rows,avatars:Object.fromEntries(i.avatars),downstreams:Object.fromEntries(i.downstreams),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,rowsStats:i.rowsStats?.size?Object.fromEntries(i.rowsStats):void 0,rowsStatsLoading:i.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeRowsStats(e){if(null!=e.rowsStats)return this.host.notify(eA,{rowsStats:Object.fromEntries(e.rowsStats),rowsStatsLoading:e.rowsStatsDeferred?.isLoaded!=null&&!e.rowsStatsDeferred.isLoaded()})}async notifyDidStartFeaturePreview(e){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eE,this._ipcNotificationMap,this),!1;e??=this.getFeaturePreview();let[t]=await this.getGraphAccess();return this.host.notify(eE,{featurePreview:e,allowed:this.isGraphAccessAllowed(t,e)})}async notifyDidChangeWorkingTree(){return this.host.ready&&this.host.visible?this.host.notify(eF,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.host.addPendingIpcNotification(eF,this._ipcNotificationMap,this),!1)}async notifyDidChangeSelection(){return this.host.ready&&this.host.visible?this.host.notify(eV,{selection:this._selectedRows??{}}):(this.host.addPendingIpcNotification(eV,this._ipcNotificationMap,this),!1)}async notifyDidChangeSubscription(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(e_,this._ipcNotificationMap,this),!1;let[e]=await this.getGraphAccess();return this.host.notify(e_,{subscription:e.subscription.current,allowed:this.isGraphAccessAllowed(e,this.getFeaturePreview())})}async notifyDidChangeState(){return this.host.ready&&this.host.visible?(this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(eD,{state:await this.getState()})):(this.host.addPendingIpcNotification(eD,this._ipcNotificationMap,this),!1)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);let t=this.repository;null!=t&&(this._repositoryEventsDisposable=r.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.watchFileSystem(1e3),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,$.wt)(e=>{"gitlens:repos:withHostingIntegrationsConnected"===e&&(this.resetRefsMetadata(),this.updateRefsMetadata())})))}onIntegrationConnectionChanged(e){this.notifyDidChangeRepoConnection()}async notifyDidChangeRepoConnection(){this.host.notify(eS,{repositories:await this.getRepositoriesState()})}async getRepositoriesState(){return eJ(this.container.git.openRepositories)}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);let t=this.repository;if(null==t)return;let i=await t.getLastFetched()??0,r=(0,H.u)(i);0!==i&&r>0&&(this._lastFetchedDisposable=(0,U.gC)(()=>{let e=(0,H.u)(i);r!==(0,H.u)(i)&&(r=e),this.notifyDidFetch()},r))}async ensureSearchStartsInRange(e,t){let i;if(0!==t.results.size){for(let r of t.results.keys()){let t=e.remappedIds?.get(r)??r;if(e.ids.has(t))return t;i=t;break}if(null!=i)return await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0}}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){return e?.excludeTypes}getExcludedRefs(e,t){if(null==t)return;let i=e?.excludeRefs;if(null==i||0===Object.keys(i).length)return;let r=e=>this.host.asWebviewUri(e),s=N.H.get("graph.avatars",void 0,!0),o={};for(let e in i){let a={...i[e]};if("remote"===a.type&&a.owner){let e=t.remotes.get(a.owner);null!=e&&(a.avatarUrl=((s?e.provider?.avatarUri:void 0)??G.Wf(this.container,e,r))?.toString(!0))}o[e]=a}return o}async getIncludedRefs(e,t,i){let r,s;if(this.cancelOperation("computeIncludedRefs"),null==t)return{refs:{}};switch(this.getBranchesVisibility(e)){case"smart":{let e;let o=(0,Z.I6)(t.branches.values(),e=>e.current);if(null==o)return{refs:{}};let a=this.createCancellation("computeIncludedRefs"),[n,h,l]=await Promise.allSettled([this.container.git.branches(o.repoPath).getBaseBranchName?.(o.name),(0,_.Z5)(this.container,o.repoPath,o.getRemoteName()),(0,_.b3)(this.container,o,{cancellation:a.token,timeout:i?.timeout})]),p=(0,J.Ro)(n),d=(0,J.Ro)(h),g=(0,J.Ro)(l);g?.paused?s=g.value.then(async e=>{if(!(null==e||a?.token.isCancellationRequested))return Object.fromEntries(await this.getVisibleRefs(t,o,{baseOrTargetBranchName:e,defaultBranchName:d}))}):e=g?.value,r=await this.getVisibleRefs(t,o,{baseOrTargetBranchName:e??p,defaultBranchName:d});break}case"current":{let e=(0,Z.I6)(t.branches.values(),e=>e.current);if(null==e)return{refs:{}};r=await this.getVisibleRefs(t,e);break}default:r=new Map}return{refs:Object.fromEntries(r),continuation:s}}getFiltersByRepo(e){if(null==e)return;let t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e]}getColumnSettings(e){let t={...eZ};if(null!=e)for(let[i,r]of Object.entries(e))t[i]={...eZ[i],...r};return t}getColumnHeaderContext(e){return(0,X.C9)({webviewItem:"gitlens:graph:columns",webviewItemValue:this.getColumnContextItems(e).join(",")})}getGraphSettingsIconContext(e){return(0,X.C9)({webviewItem:"gitlens:graph:settings",webviewItemValue:this.getSettingsIconContextItems(e).join(",")})}getColumnContextItems(e){let t=[],i=["author","changes","datetime","graph","message","ref","sha"],r=0;for(let[s,o]of Object.entries(e))i.includes(s)&&(!o.isHidden&&r++,t.push(`column:${s}:${o.isHidden?"hidden":"visible"}${o.mode?`+${o.mode}`:""}`));return r>1&&t.push("columns:canHide"),t}getSettingsIconContextItems(e){let t=null!=e?this.getColumnContextItems(e):[];if(N.H.get("graph.scrollMarkers.enabled")){let e=N.H.get("graph.scrollMarkers.additionalTypes");for(let i of["localBranches","remoteBranches","stashes","tags","pullRequests"])t.push(`scrollMarker:${i}:${e.includes(i)?"enabled":"disabled"}`)}return t}getBranchesVisibility(e){let t;return this.repository?.virtual?"current":null==e?N.H.get("graph.branchesVisibility"):(null!=e&&null==e.branchesVisibility&&null!=e.includeOnlyRefs&&1===Object.keys(e.includeOnlyRefs).length&&"HEAD"===Object.values(e.includeOnlyRefs)[0].name?(t="current",null!=this.repository&&this.updateFiltersByRepo(this.repository.path,{branchesVisibility:t,includeOnlyRefs:void 0})):t=e?.branchesVisibility??N.H.get("graph.branchesVisibility"),t)}getComponentConfig(){return{avatars:N.H.get("graph.avatars"),dateFormat:N.H.get("graph.dateFormat")??N.H.get("defaultDateFormat")??"short+short",dateStyle:N.H.get("graph.dateStyle")??N.H.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:N.H.get("graph.dimMergeCommits"),enableMultiSelection:this.container.prereleaseOrDebugging,highlightRowsOnRefHover:N.H.get("graph.highlightRowsOnRefHover"),idLength:N.H.get("advanced.abbreviatedShaLength"),minimap:N.H.get("graph.minimap.enabled"),minimapDataType:N.H.get("graph.minimap.dataType"),minimapMarkerTypes:this.getMinimapMarkerTypes(),onlyFollowFirstParent:N.H.get("graph.onlyFollowFirstParent"),scrollRowPadding:N.H.get("graph.scrollRowPadding"),scrollMarkerTypes:this.getScrollMarkerTypes(),showGhostRefsOnRowHover:N.H.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:N.H.get("graph.showRemoteNames"),sidebar:N.H.get("graph.sidebar.enabled")??!0}}getScrollMarkerTypes(){return N.H.get("graph.scrollMarkers.enabled")?["selection","highlights","head","upstream",...N.H.get("graph.scrollMarkers.additionalTypes")]:[]}getMinimapMarkerTypes(){return N.H.get("graph.minimap.enabled")?["selection","highlights","head","upstream",...N.H.get("graph.minimap.additionalTypes")]:[]}getEnabledRefMetadataTypes(){let e=[];return N.H.get("graph.issues.enabled")&&e.push("issue"),N.H.get("graph.pullRequests.enabled")&&e.push("pullRequest"),N.H.get("graph.showUpstreamStatus")&&e.push("upstream"),e}async getGraphAccess(){let e=await this.container.git.access(p.kU.Graph,this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(e=await this.container.git.access(p.kU.Graph,this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}isGraphAccessAllowed(e,t){return(e?.allowed??!1)!==!1||"active"===(0,p.Zd)(t)}getGraphItemContext(e){let t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.host.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;let e=this.container.git.status(this.repository.path),t=await e.getStatus(),i=t?.getDiffStatus(),r=await e.getPausedOperationStatus?.();return{added:i?.added??0,deleted:i?.deleted??0,modified:i?.changed??0,hasConflicts:t?.hasConflicts,pausedOpStatus:r,context:(0,X.C9)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,S.SU,"work-dir-changes")}})}}async getState(e){let t,i;if(0===this.container.git.repositoryCount||null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{...this.host.baseWebviewState,allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.host.title=`${this.host.originalTitle}: ${this.repository.formattedName}`;let{defaultItemLimit:r}=N.H.get("graph"),s=Math.max(r,this._graph?.ids.size??r),o=this._selectedId,a=null==o||o===S.SU?"HEAD":o,n=this.getColumns(),h=this.getColumnSettings(n),l=this.container.git.getCommitsForGraph(this.repository.uri,e=>this.host.asWebviewUri(e),{include:{stats:N.H.get("graph.minimap.enabled")&&"lines"===N.H.get("graph.minimap.dataType")||!h.changes.isHidden},limit:s,ref:a}),p=Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats(),this.repository.git.branches().getBranch(),this.repository.getLastFetched()]);e?queueMicrotask(async()=>{let e=await l;this.setGraph(e),o!==S.SU&&this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)}):(t=await l,this.setGraph(t),o!==S.SU&&this.setSelectedRows(t.id));let[d,g,c,u]=await p,[m,f]=(0,J.Ro)(d)??[],v=(0,J.Ro)(c);if(null!=v){i={...v.state};let e=t?.worktreesByBranch??await (0,T.Ao)(this.repository);if(i.worktree=e?.has(v.id)??!1,null!=v.upstream){i.upstream=v.upstream.name;let e=this.createCancellation("state"),[t,r]=await Promise.allSettled([v.getRemote(),(0,J.wW)(v.getAssociatedPullRequest(),e.token,100)]),s=(0,J.Ro)(t);s?.provider!=null&&(i.provider={name:s.provider.name,icon:"remote"===s.provider.icon?"cloud":s.provider.icon,url:s.provider.url({type:P.J.Repo})});let o=(0,J.Ro)(r);if(o?.paused){let t={...i};o.value.then(i=>{e?.token.isCancellationRequested||null==i||(t.pr=(0,B.pf)(i),this.notifyDidChangeBranchState(t))})}else{let e=o?.value;null!=e&&(i.pr=(0,B.pf)(e))}}}let w=this.getFiltersByRepo(this.repository.path),y={branchesVisibility:this.getBranchesVisibility(w),excludeRefs:this.getExcludedRefs(w,t)??{},excludeTypes:this.getExcludedTypes(w)??{},includeOnlyRefs:void 0};if(null!=t){let e=await this.getIncludedRefs(w,t,{timeout:100});y.includeOnlyRefs=e.refs,e.continuation?.then(e=>{null!=e&&this.notifyDidChangeRefsVisibility({...y,includeOnlyRefs:e})})}let b=this.container.storage.get("graph:searchMode")??"normal",C=this.getFeaturePreview();return{...this.host.baseWebviewState,webroot:this.host.getWebRoot(),windowFocused:this.isWindowFocused,repositories:await eJ(this.container.git.openRepositories),selectedRepository:this.repository.path,selectedRepositoryVisibility:f,branchesVisibility:y.branchesVisibility,branch:v&&{name:v.name,ref:v.ref,refType:v.refType,remote:v.remote,repoPath:v.repoPath,sha:v.sha,id:v.id,upstream:v.upstream},branchState:i,lastFetched:new Date((0,J.Ro)(u)),selectedRows:this._selectedRows,subscription:m?.subscription.current,allowed:this.isGraphAccessAllowed(m,C),avatars:null!=t?Object.fromEntries(t.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rowsStatsLoading:t?.rowsStatsDeferred?.isLoaded!=null&&!t.rowsStatsDeferred.isLoaded(),rows:t?.rows,downstreams:null!=t?Object.fromEntries(t.downstreams):void 0,paging:null!=t?{startingCursor:t.paging?.startingCursor,hasMore:t.paging?.hasMore??!1}:void 0,columns:h,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(h),settings:this.getGraphSettingsIconContext(h)},excludeRefs:y.excludeRefs,excludeTypes:y.excludeTypes,includeOnlyRefs:y.includeOnlyRefs,nonce:this.host.cspNonce,workingTreeStats:(0,J.Ro)(g)??{added:0,deleted:0,modified:0},defaultSearchMode:b,featurePreview:C}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(let[i,r]of Object.entries(e))t=(0,Q.Y8)(t,i,r);this.container.storage.storeWorkspace("graph:columns",t).catch(),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==e||!t?.length)return;let r=this.getFiltersByRepo(e)?.excludeRefs??{};for(let e of t)r=(0,Q.Y8)(r,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:r}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)return;let i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,Q.Y8)(i,e,{...i?.[e],...t}))}async getSmartRefs(e,{refs:t,currentBranch:i,defaultBranchName:r,associatedPullRequest:s}){let o=!0;if(s?.refs!=null){let i;let r=(0,Z.I6)(e.remotes.values(),e=>e.matches(s.refs.base.url));null!=r&&(i=e.branches.get(`${r.name}/${s.refs.base.branch}`)),null!=i&&(t.push({id:i.id,name:i.name,type:"remote"}),o=!1)}if(o&&null!=r&&r!==i?.name){let i=e.branches.get(r);if(null!=i){if(i.remote){t.push({id:i.id,name:i.name,type:"remote"});let s=await (0,M.kY)(r,e.branches);null!=s&&t.push({id:s.id,name:s.name,type:"head"})}else t.push({id:i.id,name:i.name,type:"head"}),null==i.upstream||i.upstream.missing||t.push({id:(0,M.Yk)(e.repoPath,!0,i.upstream.name),name:i.upstream.name,type:"remote"})}}return t}async getVisibleRefs(e,t,i){let r=new Map([t.remote?[t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()}]:[t.id,{id:t.id,type:"head",name:t.name}]]);if(null!=t.upstream&&!t.upstream.missing){let i=(0,M.Yk)(e.repoPath,!0,t.upstream.name);r.has(i)||r.set(i,{id:i,type:"remote",name:(0,M.km)(t.upstream.name),owner:t.getRemoteName()})}let s=!0,o=i?.baseOrTargetBranchName;if(null!=o&&o!==t?.name){let t=e.branches.get(o);if(null!=t){if(s=!1,t.remote)r.has(t.id)||r.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()});else if(null!=t.upstream&&!t.upstream.missing){let i=(0,M.Yk)(e.repoPath,!0,t.upstream.name);r.has(t.id)||r.set(i,{id:i,type:"remote",name:(0,M.km)(t.upstream.name),owner:t.getRemoteName()})}}}let a=i?.associatedPullRequest;if(a?.refs!=null){let t;let i=(0,Z.I6)(e.remotes.values(),e=>e.matches(a.refs.base.url));null!=i&&(t=e.branches.get(`${i.name}/${a.refs.base.branch}`)),null==t||(s=!1,r.has(t.id)||r.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()}))}if(s){let s=i?.defaultBranchName;if(null!=s&&s!==t?.name){let t=e.branches.get(s);if(null!=t){if(t.remote){r.has(t.id)||r.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()});let i=await (0,M.kY)(s,e.branches);null==i||r.has(i.id)||r.set(i.id,{id:i.id,type:"head",name:i.name})}else if(r.has(t.id)||r.set(t.id,{id:t.id,type:"head",name:t.name}),null!=t.upstream&&!t.upstream.missing){let i=(0,M.Yk)(e.repoPath,!0,t.upstream.name);r.has(t.id)||r.set(i,{id:i,type:"remote",name:(0,M.km)(t.upstream.name),owner:t.getRemoteName()})}}}}return r}updateIncludeOnlyRefs(e,{branchesVisibility:t,refs:i}){let r;if(null!=e){if(i?.length)for(let e of(r={},i))r[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner};else r=void 0;if(null!=t){let i=this.getBranchesVisibility(this.getFiltersByRepo(e));this.container.telemetry.sendEvent("graph/branchesVisibility/changed",{...this.getTelemetryContext(),"branchesVisibility.old":i,"branchesVisibility.new":t})}this.updateFiltersByRepo(e,{branchesVisibility:t,includeOnlyRefs:r}),this.notifyDidChangeRefsVisibility()}}updateExcludedTypes(e,{key:t,value:i}){if(null==e)return;let r=this.getFiltersByRepo(e)?.excludeTypes;(null!=r&&Object.keys(r).length||!1!==i)&&(r=(0,Q.Y8)(r,t,i),this.container.telemetry.sendEvent("graph/filters/changed",{...this.getTelemetryContext(),key:t,value:i}),this.updateFiltersByRepo(e,{excludeTypes:r}),this.notifyDidChangeRefsVisibility())}resetHoverCache(){this._hoverCache.clear(),this.cancelOperation("hover")}resetRefsMetadata(){return this._refsMetadata=(0,$.SD)("gitlens:repos:withHostingIntegrationsConnected")?void 0:null,this._refsMetadata}resetRepositoryState(){this._getBranchesAndTagsTips=void 0,this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this.cancelOperation("search")}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===S.SU&&(e="work-dir-changes"),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e?(this.resetHoverCache(),this.resetRefsMetadata(),this.resetSearchState(),this.cancelOperation("computeIncludedRefs")):e.rowsStatsDeferred?.promise.then(()=>void this.notifyDidChangeRowsStats(e))}async updateGraphWithMoreRows(e,t,i){let{defaultItemLimit:r,pageItemLimit:s}=N.H.get("graph"),o=await e.more?.(s??r,t);if(null!=o){if(this.setGraph(o),!i?.paging?.hasMore)return;let e=Z.HV(i.results)?.[0];if(null==e)return;let t=o.remappedIds?.get(e)??e;o.ids.has(t)&&queueMicrotask(async()=>{try{let e=await this.getSearchResults({search:i.query,more:!0});this.host.notify(eq,e)}catch(e){if(e instanceof l.AL)return;this.host.notify(eq,{results:{error:e instanceof y.Do?"Invalid search pattern":"Unexpected error"}})}})}}fetch(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;m.hd(this.repository,t)}forcePush(e){this.push(e,!0)}pull(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;m.a$(this.repository,t)}push(e,t){let i=null!=e?this.getGraphItemRef(e):void 0;m.VC(this.repository,t,i)}createBranch(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.vt(t.repoPath,t)}deleteBranch(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;return g.TF(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;return m.h1(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(e0(e,"branch")){let i;let{ref:r}=e.webviewItemValue;return r.remote?i=(0,M.Zq)(r.name):null!=r.upstream&&(i=(0,M.Zq)(r.upstream.name)),(0,L.RS)(n.d.OpenOnRemote,{repoPath:r.repoPath,resource:{type:P.J.Branch,branch:r.name},remote:i,clipboard:t})}return Promise.resolve()}publishBranch(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;return m.VC(t.repoPath,void 0,t)}return Promise.resolve()}rebase(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.RU(t.repoPath,t)}rebaseToRemote(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return m.RU(t.repoPath,(0,A.kA)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;return g.$w(t.repoPath,t)}return Promise.resolve()}associateIssueWithBranch(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,L.RS)(n.d.AssociateIssueWithBranch,{command:"associateIssueWithBranch",branch:t,source:"graph"})}return Promise.resolve()}cherryPick(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():m.$T(t.repoPath,t)}async copy(e){let t;let{selection:i}=this.getGraphItemRefs(e);if(i.length)t=i.map(e=>"revision"===e.refType&&e.message?`${e.name}: ${e.message.trim()}`:e.name).join("\n");else if(eX(e,"contributor")){let{name:i,email:r}=e.webviewItemValue;t=`${i}${r?` <${r}>`:""}`}else if(eX(e,"pullrequest")){let{url:i}=e.webviewItemValue;t=i}null!=t&&await r.env.clipboard.writeText(t)}copyMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,L.RS)(n.d.CopyMessageToClipboard,{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,V.HH)(i)||(i=await this.container.git.resolveReference(t.repoPath,i,void 0,{force:!0})),(0,L.RS)(n.d.CopyShaToClipboard,{sha:i})}openInDetailsView(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():this.host.isHost("view")?void(0,c.tl)(t,{preserveFocus:!0,preserveVisibility:!1}):(0,L.RS)(n.d.ShowInDetailsView,{ref:t})}async commitViaSCM(e){let t=this.getGraphItemRef(e,"revision");if(await (0,L.S4)("workbench.view.scm"),null!=t){let e=await this.container.git.getScmRepository(t.repoPath);if(null==e)return;e.inputBox.value=e.inputBox.value}}openCommitOnRemote(e,t){let{selection:i}=this.getGraphItemRefs(e,"revision");return null==i?Promise.resolve():(0,L.RS)(n.d.OpenOnRemote,{repoPath:i[0].repoPath,resource:i.map(e=>({type:P.J.Commit,sha:e.ref})),clipboard:t})}async compareSelectedCommits(e){let{selection:t}=this.getGraphItemRefs(e,"revision");if(null==t||2!==t.length)return Promise.resolve();let[i,r]=t,[s,o]=await (0,c.Di)(this.container,i.repoPath,i.ref,r.ref);return this.container.views.searchAndCompare.compare(i.repoPath,s,o)}async abortPausedOperation(e){if(null==this.repository)return;let t=this.container.git.status(this.repository.path).abortPausedOperation;if(null!=t)try{await t()}catch(e){r.window.showErrorMessage(e.message)}}async continuePausedOperation(e){if(null==this.repository)return;let t=await this.container.git.status(this.repository.path).getPausedOperationStatus?.();if(null==t||"revert"===t.type)return;let i=this.container.git.status(t.repoPath).continuePausedOperation;if(null!=i)try{await i()}catch(e){r.window.showErrorMessage(e.message)}}async openRebaseEditor(e){if(null==this.repository)return;let t=await this.container.git.status(this.repository.path).getPausedOperationStatus?.();if(null==t||"rebase"!==t.type)return;let i=await this.container.git.getGitDir(this.repository.path);if(null==i)return;let s=r.Uri.joinPath(i.uri,"rebase-merge","git-rebase-todo");(0,L.S4)("vscode.openWith",s,"gitlens.rebase",{preview:!1})}async skipPausedOperation(e){if(null==this.repository)return;let t=this.container.git.status(this.repository.path).continuePausedOperation;if(null!=t)try{await t({skip:!0})}catch(e){r.window.showErrorMessage(e.message)}}copyDeepLinkToBranch(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,L.RS)(n.d.CopyDeepLinkToBranch,{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,L.RS)(n.d.CopyDeepLinkToCommit,{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;return t.remote?(0,L.RS)(n.d.CopyDeepLinkToRepo,{refOrRepoPath:t.repoPath,remote:(0,M.Zq)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(e0(e,"tag")){let{ref:t}=e.webviewItemValue;return(0,L.RS)(n.d.CopyDeepLinkToTag,{refOrRepoPath:t})}return Promise.resolve()}async shareAsCloudPatch(e){let t=this.getGraphItemRef(e,"revision")??this.getGraphItemRef(e,"stash");if(null==t)return Promise.resolve();let{summary:i,body:r}=(0,O.TH)(t.message);return(0,L.RS)(n.d.CreateCloudPatch,{to:t.ref,repoPath:t.repoPath,title:i,description:r})}resetCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():m.cL(t.repoPath,(0,A.kA)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():m.cL(t.repoPath,t)}resetToTip(e){let t=this.getGraphItemRef(e,"branch");return null==t?Promise.resolve():m.cL(t.repoPath,(0,A.kA)(t.ref,t.repoPath,{refType:"revision",name:t.name}))}revertCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():m.ru(t.repoPath,t)}switchTo(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.S_(t.repoPath,t)}resetToTag(e){let t=this.getGraphItemRef(e,"tag");return null==t?Promise.resolve():m.cL(t.repoPath,t)}hideRef(e,t){var i;let r;if(t?.group&&null!=(i=e)&&null!=i&&(0,X.PH)(i)&&("gitlens.graph"===i.webview||"gitlens.views.graph"===i.webview)&&"object"==typeof i.webviewItemGroupValue&&"refGroup"===i.webviewItemGroupValue.type)({refs:r}=e.webviewItemGroupValue);else if(!t?.group&&e0(e)){let{ref:t}=e.webviewItemValue;null!=t.id&&(r=[t])}return null!=r&&this.updateExcludedRefs(this._graph?.repoPath,r.map(e=>{let i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,M.km)(e.name):e.name,owner:i?(0,M.Zq)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}}),!1),Promise.resolve()}switchToAnother(e){let t=this.getGraphItemRef(e);return null==t?m.S_(this.repository?.path):m.S_(t.repoPath)}async undoCommit(e){let t=this.getGraphItemRef(e,"revision");if(null==t)return Promise.resolve();await (0,c.MQ)(this.container,t)}saveStash(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():f.VC(t.repoPath)}applyStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():f.Bb(t.repoPath,t)}deleteStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():f.gv(t.repoPath,[t])}renameStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():f.$w(t.repoPath,t)}async createTag(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():v.vt(t.repoPath,t)}deleteTag(e){if(e0(e,"tag")){let{ref:t}=e.webviewItemValue;return v.TF(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():w.vt(t.repoPath,void 0,t)}async createPullRequest(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),r=await i?.git.branches().getBranch(t.name),s=await r?.getRemote();return(0,L.ph)("createPullRequest",{repoPath:t.repoPath,remote:null!=s?{name:s.name,provider:null!=s.provider?{id:s.provider.id,name:s.provider.name,domain:s.provider.domain}:void 0,url:s.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequest(e){if(eX(e,"pullrequest")){let t=e.webviewItemValue;return(0,L.ph)("openPullRequest",{repoPath:t.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})}return Promise.resolve()}openPullRequestChanges(e){if(eX(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=(0,B.tI)(t.repoPath,t.refs);return(0,c.$5)(this.container,{repoPath:e.repoPath,lhs:e.base.ref,rhs:e.head.ref},{title:`Changes in Pull Request #${t.id}`})}}return Promise.resolve()}openPullRequestComparison(e){if(eX(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=(0,B.tI)(t.repoPath,t.refs);return this.container.views.searchAndCompare.compare(e.repoPath,e.head,e.base)}}return Promise.resolve()}openPullRequestOnRemote(e,t){if(eX(e,"pullrequest")){let{url:i}=e.webviewItemValue;return(0,L.RS)(n.d.OpenPullRequestOnRemote,{pr:{url:i},clipboard:t})}return Promise.resolve()}openIssueOnRemote(e){if(eX(e,"issue")){let{url:t}=e.webviewItemValue;(0,j.CZ)(t)}return Promise.resolve()}async compareAncestryWithWorking(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=this.container.git.branches(t.repoPath),r=await i.getBranch();if(null==r)return;let s=await i.getMergeBase(r.ref,t.ref);if(null!=s)return this.container.views.searchAndCompare.compare(t.repoPath,"",{ref:s,label:`${r.ref} (${(0,V.pV)(s)})`})}async compareHeadWith(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let[i,r]=await (0,c.Di)(this.container,t.repoPath,"HEAD",t.ref);return this.container.views.searchAndCompare.compare(t.repoPath,i,r)}compareBranchWithHead(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.views.searchAndCompare.compare(t.repoPath,t.ref,"HEAD")}async compareWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=this.container.git.branches(t.repoPath),r=await i.getBranch();if(null==r)return;let s=await i.getMergeBase(r.ref,t.ref);if(null!=s)return this.container.views.searchAndCompare.compare(t.repoPath,t.ref,{ref:s,label:`${r.ref} (${(0,V.pV)(s)})`})}async openChangedFileDiffsWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=this.container.git.branches(t.repoPath),r=await i.getBranch();if(null==r)return;let s=await i.getMergeBase(r.ref,t.ref);if(null!=s)return(0,c.$5)(this.container,{repoPath:t.repoPath,lhs:s,rhs:t.ref},{title:`Changes between ${r.ref} (${(0,V.pV)(s)}) ${a.EO.ArrowLeftRightLong} ${(0,V.pV)(t.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.views.searchAndCompare.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.views.searchAndCompare.compare(t.repoPath,"",t.ref)}copyWorkingChangesToWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():w.PB("working-tree",t.repoPath)}generateCommitMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,L.RS)(n.d.GenerateCommitMessage,{repoPath:t.repoPath,source:"graph"})}async openFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,c.Km)(t)}async openAllChanges(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,c.LH)(i):(0,c.po)(i)}async openAllChangesWithWorking(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,c.Ce)(i):(0,c.Gu)(i)}async openRevisions(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,c.m)(t)}async openOnlyChangedFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,c.E9)(this.container,t)}async openInWorktree(e){if(e0(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),r=await i?.git.branches().getBranch(t.name),s=await r?.getAssociatedPullRequest();if(null!=r&&null!=i&&null!=s){let e=(await r.getRemote())?.url??(0,B.Yv)(s).remote.url;if(null!=e){let t=(0,q.pX)(this.container,r.getNameWithoutRemote(),e,ee.zB.SwitchToPullRequestWorktree,s);return this.container.deepLinks.processDeepLinkUri(t,!1,i)}}await (0,d.b)({command:"switch",state:{repos:t.repoPath,reference:t,skipWorktreeConfirmations:!0}})}}async openWorktree(e,t){if(e0(e,"branch")){let i;let{ref:r}=e.webviewItemValue;if(null==r.id)return;if(r.repoPath===this._graph?.repoPath)i=this._graph?.worktreesByBranch;else{let e=this.container.git.getRepository(r.repoPath);if(null==e)return;i=await (0,T.Ao)(e)}let s=i?.get(r.id);null!=s&&(0,j.OH)(s.uri,t)}}addAuthor(e){if(eX(e,"contributor")){let{repoPath:t,name:i,email:r,current:s}=e.webviewItemValue;return u.s(t,new R.s(t,i,r,0,void 0,void 0,s))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),r=i?.[e];null!=r?r.isHidden=!t:r={isHidden:!t},i=(0,Q.Y8)(i,e,r),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||r.isHidden||this._graph?.includes?.stats||this.updateState()}async toggleScrollMarker(e,t){let i=N.H.get("graph.scrollMarkers.additionalTypes"),r=!1;t&&!i.includes(e)?(i=i.concat(e),r=!0):!t&&i.includes(e)&&(i=i.filter(t=>t!==e),r=!0),r&&(await N.H.updateEffective("graph.scrollMarkers.additionalTypes",i),this.notifyDidChangeScrollMarkers())}async setColumnMode(e,t){let i=this.container.storage.getWorkspace("graph:columns"),r=i?.[e];null!=r?r.mode=t:r={mode:t},i=(0,Q.Y8)(i,e,r),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns()}getCommitFromGraphItemRef(e){let t=this.getGraphItemRef(e,"revision");return null!=t||null!=(t=this.getGraphItemRef(e,"stash"))?this.container.git.getCommit(t.repoPath,t.ref):Promise.resolve(void 0)}getGraphItemRef(e,t){if(null==e){let e=this.activeSelection;return null!=e&&(null==t||t===e.refType)?e:void 0}switch(t){case"branch":return e0(e,"branch")||eX(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return e0(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return e0(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return e0(e,"tag")?e.webviewItemValue.ref:void 0;default:return e0(e)?e.webviewItemValue.ref:void 0}}getGraphItemRefs(e,t){if(null==e)return{active:void 0,selection:[]};switch(t){case"branch":if(!e0(e,"branch")&&!eX(e,"upstreamStatus"))return{active:void 0,selection:[]};break;case"revision":if(!e0(e,"revision"))return{active:void 0,selection:[]};break;case"stash":if(!e0(e,"stash"))return{active:void 0,selection:[]};break;case"tag":if(!e0(e,"tag"))return{active:void 0,selection:[]};break;default:if(!e0(e))return{active:void 0,selection:[]}}let i=e.webviewItemsValues?.map(e=>e.webviewItemValue.ref)??[];return i.length||i.push(e.webviewItemValue.ref),{active:e.webviewItemValue.ref,selection:i}}createCancellation(e){this.cancelOperation(e);let t=new r.CancellationTokenSource;return this._cancellations.set(e,t),t}cancelOperation(e){this._cancellations.get(e)?.cancel(),this._cancellations.delete(e)}};async function eJ(e){return 0===e.length?Promise.resolve([]):(await Promise.allSettled(e.map(async e=>{let t=await e.git.remotes().getBestRemotesWithProviders(),i=t.find(e=>e.hasIntegration())??t[0];return{formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,provider:i?.provider?{name:i.provider.name,integration:i.hasIntegration()?{id:(0,F.p)(i.provider.id),connected:i.maybeIntegrationConnected??!1}:void 0,icon:"remote"===i.provider.icon?"cloud":i.provider.icon,url:i.provider.url({type:P.J.Repo})}:void 0,isVirtual:e.provider.virtual}}))).map(e=>(0,J.Ro)(e)).filter(e=>null!=e)}function eK(e){return null!=e&&(0,X.sc)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview)}function eX(e,t){return null!=e&&eK(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t}function e0(e,t){return null!=e&&eK(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t)}function e1(e){return null!=e&&"object"==typeof e&&"ref"in e&&(0,A.cf)(e.ref)}ez([(0,Y.Yz)({args:!1})],GraphWebviewProvider.prototype,"onFeaturePreviewChanged",1),ez([(0,Y.Yz)({args:{0:e=>e.toString()}})],GraphWebviewProvider.prototype,"onRepositoryChanged",1),ez([(0,Y.Yz)({args:!1})],GraphWebviewProvider.prototype,"onRepositoryFileSystemChanged",1),ez([(0,Y.Yz)({args:!1})],GraphWebviewProvider.prototype,"onSubscriptionChanged",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"onEnsureRowRequest",1),ez([(0,z.G)(),(0,Y.Yz)()],GraphWebviewProvider.prototype,"onGetMoreRows",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"onOpenPullRequestDetails",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"onSearchRequest",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"updateState",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"updateAvatars",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeAvatars",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeBranchState",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"updateRefsMetadata",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsMetadata",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeColumns",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeScrollMarkers",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsVisibility",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeConfiguration",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidFetch",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRows",1),ez([(0,Y.Yz)({args:!1})],GraphWebviewProvider.prototype,"notifyDidChangeRowsStats",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidStartFeaturePreview",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeWorkingTree",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSelection",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSubscription",1),ez([(0,Y.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeState",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"fetch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"forcePush",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"pull",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"push",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"createBranch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"deleteBranch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"mergeBranchInto",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openBranchOnRemote",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"publishBranch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"rebase",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"rebaseToRemote",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"renameBranch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"associateIssueWithBranch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"cherryPick",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copy",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copyMessage",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copySha",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openInDetailsView",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"commitViaSCM",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openCommitOnRemote",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"compareSelectedCommits",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"abortPausedOperation",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"continuePausedOperation",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openRebaseEditor",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"skipPausedOperation",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToBranch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToCommit",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToRepo",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToTag",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"shareAsCloudPatch",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"resetCommit",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"resetToCommit",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"resetToTip",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"revertCommit",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"switchTo",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"resetToTag",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"hideRef",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"switchToAnother",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"undoCommit",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"saveStash",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"applyStash",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"deleteStash",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"renameStash",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"createTag",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"deleteTag",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"createWorktree",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"createPullRequest",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openPullRequest",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openPullRequestChanges",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openPullRequestComparison",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openPullRequestOnRemote",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openIssueOnRemote",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"compareAncestryWithWorking",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"compareHeadWith",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"compareBranchWithHead",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"compareWithMergeBase",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openChangedFileDiffsWithMergeBase",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"compareWithUpstream",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"compareWorkingWith",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"copyWorkingChangesToWorktree",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"generateCommitMessage",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openFiles",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openAllChanges",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openAllChangesWithWorking",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openRevisions",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openOnlyChangedFiles",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openInWorktree",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"openWorktree",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"addAuthor",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"toggleColumn",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"toggleScrollMarker",1),ez([(0,Y.Rm)()],GraphWebviewProvider.prototype,"setColumnMode",1)}};
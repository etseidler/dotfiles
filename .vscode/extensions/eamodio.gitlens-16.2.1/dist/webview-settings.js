exports.id=426,exports.ids=[426],exports.modules={7237:(e,t,n)=>{n.d(t,{SettingsWebviewProvider:()=>SettingsWebviewProvider});var i=n(1398),o=n(5811),a=n(1646),s=n(8400),r=n(315),c=n(7940),d=n(9286),u=n(3444),h=n(4143),g=n(5270),l=n(3503);let m="settings",p=new l.Oz(m,"configuration/preview"),f=new l.C1(m,"didOpenAnchor"),C=new l.C1(m,"didChangeAccount"),b=new l.C1(m,"didChangeConnectedJira");let SettingsWebviewProvider=class SettingsWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=i.Disposable.from(h.H.onDidChangeAny(this.onAnyConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),e.integrations.onDidChangeConnectionState(this.onIntegrationConnectionStateChanged,this))}_disposable;_pendingJumpToAnchor;dispose(){this._disposable.dispose()}getTelemetryContext(){return{...this.host.getTelemetryContext()}}onSubscriptionChanged(e){this.host.notify(C,{hasAccount:null!=e.current.account})}onIntegrationConnectionStateChanged(e){"jira"===e.key&&this.host.notify(b,{hasConnectedJira:"connected"===e.reason})}async getAccountState(){return null!=(await this.container.subscription.getSubscription()).account}async getJiraConnected(){let e=await this.container.integrations.get(a.tp.Jira);return null!=e&&(e.maybeConnected??e.isConnected())}async includeBootstrap(){let e=[["user","User"]];return i.workspace.workspaceFolders?.length&&e.push(["workspace","Workspace"]),{...this.host.baseWebviewState,version:this.container.version,config:h.H.getAll(!0),customSettings:this.getCustomSettings(),scope:"user",scopes:e,hasAccount:await this.getAccountState(),hasConnectedJira:await this.getJiraConnected()}}onReloaded(){this.notifyDidChangeConfiguration()}onShowing(e,t,...n){let i=n[0];if(i&&"string"==typeof i){if(!e&&this.host.ready&&this.host.visible)return queueMicrotask(()=>void this.host.notify(f,{anchor:i,scrollBehavior:"smooth"})),[!0,void 0];this._pendingJumpToAnchor=i}return[!0,void 0]}onActiveChanged(e){e&&this.notifyDidChangeConfiguration()}onReady(){if(null!=this._pendingJumpToAnchor){let e=this._pendingJumpToAnchor;this._pendingJumpToAnchor=void 0,this.host.notify(f,{anchor:e,scrollBehavior:"auto"})}}async onMessageReceived(e){if(null!=e)switch(!0){case l.lJ.is(e):{let t;let{params:n}=e,o="workspace"===n.scope?i.ConfigurationTarget.Workspace:i.ConfigurationTarget.Global;for(t in n.changes){let e=n.changes[t];if((0,l.HM)(t)){let n=this.customSettings.get(t);null!=n&&"boolean"==typeof e&&await n.update(e);continue}(0,l.YU)(t,e);let i=h.H.inspect(t);if(null!=e){if("workspace"===n.scope){if(e===i.workspaceValue)continue}else{if(e===i.globalValue&&e!==i.defaultValue)continue;e===i.defaultValue&&(e=void 0)}}await h.H.update(t,e,o)}for(let e of n.removes)await h.H.update(e,void 0,o);break}case p.is(e):switch(e.params.type){case"commit":case"commit-uncommitted":{let t,n;let i=new r.Yg(this.container,"~/code/eamodio/vscode-gitlens-demo","fe26af408293cba5b4bfd77306e1ac9ff7ccaef8",new r.M7("You","eamodio@gmail.com",new Date("2016-11-12T20:41:00.000Z")),new r.M7("You","eamodio@gmail.com",new Date("2020-11-01T06:57:21.000Z")),"commit-uncommitted"===e.params.type?"Uncommitted changes":"Supercharged",["3ac1d3f51d7cf5f438cc69f25f6740536ad80fef"],"commit-uncommitted"===e.params.type?"Uncommitted changes":"Supercharged",new c.l(this.container,"~/code/eamodio/vscode-gitlens-demo","code.ts",d.NO.Modified),void 0,[]),o=!1;switch(e.params.key){case h.H.name("currentLine.format"):o=h.H.get("currentLine.pullRequests.enabled");break;case h.H.name("statusBar.format"):o=h.H.get("statusBar.pullRequests.enabled")}o&&(t=new u.B9({id:"github",name:"GitHub",domain:"github.com",icon:"github"},{id:"eamodio",name:"Eric Amodio",avatarUrl:"https://avatars1.githubusercontent.com/u/641685?s=32&v=4",url:"https://github.com/eamodio"},"1",void 0,"Supercharged","https://github.com/gitkraken/vscode-gitlens/pulls/1",{owner:"gitkraken",repo:"vscode-gitlens"},"merged",new Date("Sat, 12 Nov 2016 19:41:00 GMT"),new Date("Sat, 12 Nov 2016 19:41:00 GMT"),void 0,new Date("Sat, 12 Nov 2016 20:41:00 GMT")));try{n=s.c.fromTemplate(e.params.format,i,{dateFormat:h.H.get("defaultDateFormat"),pullRequest:t,messageTruncateAtNewLine:!0})}catch{n="Invalid format"}await this.host.respond(p,e,{preview:n})}}}}onAnyConfigurationChanged(e){(h.H.changedAny(e,o.Od)||h.H.changedAny(e,[...(0,g.Tj)(this.customSettings.values(),e=>e.name)]))&&this.notifyDidChangeConfiguration()}_customSettings;get customSettings(){return null==this._customSettings&&(this._customSettings=new Map([["rebaseEditor.enabled",{name:"workbench.editorAssociations",enabled:()=>this.container.rebaseEditor.enabled,update:this.container.rebaseEditor.setEnabled}],["currentLine.useUncommittedChangesFormat",{name:"currentLine.uncommittedChangesFormat",enabled:()=>null!=h.H.get("currentLine.uncommittedChangesFormat"),update:async e=>h.H.updateEffective("currentLine.uncommittedChangesFormat",e?"✏️ ${ago}":null)}]])),this._customSettings}getCustomSettings(){let e=Object.create(null);for(let[t,n]of this.customSettings)e[t]=n.enabled();return e}notifyDidChangeConfiguration(){return this.host.notify(l.HE,{config:h.H.getAll(!0),customSettings:this.getCustomSettings()})}}}};